#!/usr/bin/env python3

from pwn import *
import time

from ctypes import CDLL                                            
import ctypes                                                      
                                                                       
# Load the C standard library                                      
libc = CDLL("libc.so.6")

# ===========================================================
#                    START OF EXPLOIT
# ===========================================================

io = remote('pwnable.kr', 9009)

# Skip through menu
io.recvuntil(b'(Y/N)\n')
io.sendline(b'Y')

# Begin playing
io.sendlineafter(b'Choice: ', b'1')
io.recvline()



def place_bet():
    """ Bet half of all the savings (just in case dealer gets 21)
    """
    global cash
    io.sendlineafter(b'Enter Bet: $', str(cash//2).encode())
    cash -= cash // 2

def read_card():
    """ Reads the number on the card
    """
    io.recvline()
    io.recvline()
    val = io.recvline().decode()[3]
    if val.isdigit():
        return int(val)

    if val == 'A':
        return 11
    return 10

def predict_card(seed):
    """ Runs the algorithm for picking a card for a given seed
    """
    print('getting predict for', seed)
    libc.srand(ctypes.c_uint(seed))

    libc.rand() # we don't care what this is
    
    libc.srand(ctypes.c_uint(seed))
    return (libc.rand() % 13) + 1

def time_the_bet(current_time):
    """ Gets the best time to best and returns the prediction
    """
    global total
    target = 21 - total
    prediction = 0
    time_offset = 1
    
    return 2, predict_card(current_time + 2)

    if target > 11: # won't go over, just hit
        return 0, 0
    
    while prediction != target:
        time_offset += 1
        prediction = predict_card(current_time + time_offset)

    return time_offset, prediction

def sleep_until_target_time(target_s):
    target_ms = target_s * 1000
    current_time_ms = int(time.time() * 1000)
    sleep_duration_ms = target_ms - current_time_ms

    if sleep_duration_ms > 0:                                      
            time.sleep(sleep_duration_ms / 1000)  # Convert

# Get cash and inital total
cash = int(io.recvline().decode().split(' ')[1][1:])
total = read_card()

# Place bet for new round
print('cash:', cash)
print('total:', total)
place_bet()
playing = True

while playing:
    print('current total:', total)
    io.recvuntil(b'Please Enter H to Hit or S to Stay.\n')
    
    current_time = int(time.time())
    time_offset, prediction = time_the_bet(current_time)

    if time_offset == 0:
        print('total too low, just hit...')
    else:
        print(f"predicting card to be {prediction} at {time_offset + current_time}({time_offset}) seconds...")
        sleep_until_target_time(current_time + time_offset)
        print('sent at:', time.time())
    
    io.sendline(b'H')
    result = read_card()
    
    # read and update total
    if prediction != 0 and result != prediction:
        print("wrong prediction! Got", result)
        io.interactive()
    total += result

    # check if dealer won or went over
    io.recvuntil(b'Your Total is')
    io.recvline()
    info = io.recvline().decode()
    
    if len(info) > 1:
        print('end of round:', info.decode())
        playing = False

# Receive the flag
io.interactive()
