#!/usr/bin/env python3

from pwn import *
import time

from ctypes import CDLL                                            
import ctypes                                                      
                                                                       
# Load the C standard library                                      
libc = CDLL("libc.so.6")

# ===========================================================
#                    START OF EXPLOIT
# ===========================================================

io = remote('pwnable.kr', 9009)

# Skip through menu
io.recvuntil(b'(Y/N)\n')
io.sendline(b'Y')

# Begin playing
io.sendlineafter(b'Choice: ', b'1')
io.recvline()

# Get cash
cash = int(io.recvline().decode().split(' ')[1][1:])

# Get total card value
io.recvuntil(b'Your Total is ')
total = int(io.recvline().decode())

def place_bet():
    """ Bet all the savings
    """
    global cash
    io.sendlineafter(b'Enter Bet: $', str(cash).encode())
    cash = 0

def predict_card(seed):
    """ Runs the algorithm for picking a card
    """
    libc.srand(ctypes.c_uint(seed))

    libc.rand() # we don't care what this is
    
    libc.srand(ctypes.c_uint(seed))
    return (libc.rand() % 13) + 1


print('cash:', cash)
print('total:', total)
place_bet()

io.recvuntil(b'Please Enter H to Hit or S to Stay.\n')
current_time = int(time.time())
prediction = predict_card(current_time + 2)
print("predicting card to be:", prediction)

def sleep_until_target_time(target_s):
    target_ms = target_s * 1000
    current_time_ms = int(time.time() * 1000)
    sleep_duration_ms = target_ms - current_time_ms

    if sleep_duration_ms > 0:                                      
            time.sleep(sleep_duration_ms / 1000)  # Convert
sleep_until_target_time(current_time + 2)
io.sendline(b'H')



# Receive the flag
io.interactive()
