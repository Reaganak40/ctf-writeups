#!/usr/bin/env python3

from pwn import *

# ===========================================================
#                    START OF EXPLOIT
# ===========================================================

io = remote('pwnable.kr', 9007)

# Skip instructions
io.recvuntil(b'Ready? starting in 3 sec... -')
io.recvline()
io.recvline()

def get_info():
    info = io.recvline().decode()
    N = int(info.split(' ')[0][2:])
    C = int(info.split(' ')[1][2:])
    return N, C

num_coins, guesses = get_info()
print(f"new cycle: N={num_coins} C={guesses}")

def create_input(guess_arr):
    return b' '.join([str(x).encode() for x in guess_arr])

# track last iteration in case we need to backtrace
lo = 0 
hi = num_coins - 1

last_lo = 0
last_hi = 0

found = 0
while lo <= hi:
    last_lo = lo
    last_hi = hi
    
    # cut in half
    if lo != hi:
        best_guess = [x for x in range(lo, (lo + ((hi-lo) // 2)) + 1)]
    
    else:
        best_guess = [lo]
    #print(f'guess range: {best_guess[0]} to {best_guess[-1]}')
    payload = create_input(best_guess)
    
    # send guess
    io.sendline(payload)
    scale_result = io.recvline().decode()

    # reset if correctly guessed
    if "Correct!" in scale_result:
        print(scale_result.strip('\n'))
        found += 1
        if found == 100:
            break

        num_coins, guesses = get_info()
        lo = 0
        hi = num_coins - 1
        continue
    
    scale_result = int(scale_result)

    # check if all real
    if (len(best_guess) * 10) == scale_result:
        #print('found all real coins, switching to other stack...')
        lo = best_guess[-1] + 1
    else:
        #print('fake exists in stack, shrinking search...')
        hi = best_guess[-1]

# Receive the flag
io.interactive()
